#!/bin/ksh 

# <std-header style='shell' orig-src='shore'>
#
#  $Id: testall,v 1.1.2.10 2009/12/03 00:19:45 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

function executeWithResult  {
print -n "$1\t--> running --> "
print "running $1" >> $2

OLD_PATH=$PATH
PATH=$PATH:.
if [[ -a $3 ]]; then
	of=/tmp/$$
	if $1 1> $of 2> $of.err ; then
	    if diff $of $3 >> $2; then
			print "ok"
	    else
			print "diff failed; results in " $of " and " $of.err 
			print "  expected results in " $3
			print "  All diffs in " $2
			exit 1
	    fi
	else
	    print "failed to execute $1 ( $? )"
		exit 1
	fi
	cat $of >> $2
	rm $of

elif $1 >> $2 2>&1; then
	print "ok"
else
	print "failed to execute $1 ( $? )"
	exit 1
fi
PATH=$OLD_PATH
}

function execute  {
    print -n "$1\t--> running --> "
    print "running $1" >> $2
    if ./$1 >> $2 2>&1; then
	print "ok"
    else
	print "failed to execute $1 ($?)"
	exit 1
    fi
}

rm -f /tmp/all*.out
outf=/tmp/all$$.out

#
# NB: many of these report addresses, random things, or timing,
# so they cannot be compared against output files. 
#

executeWithResult "box 4 5,-908,300,44444/55555,-1,1,82"  $outf box.4.out
executeWithResult "box 3 -908,300,44444/-1,1,82"  $outf box.3.out
executeWithResult "box 2 -908,44444/-1,1"  $outf box.2.out

execute errlogtest $outf

execute hash1 $outf
execute hash2 $outf

executeWithResult list1 $outf list1.out
execute list2 $outf
execute list3 $outf

execute bitvector $outf
execute heap $outf
execute ntime $outf
execute random $outf
execute rc $outf
execute stats $outf
execute "container -n 100"  $outf
execute "rand -n 30"  $outf
execute "ss 40 abcd fghi klmn pqrs uvwxyz"  $outf
execute "cuckoo -n 1000 -s 1024" $outf
executeWithResult stats2 $outf stats2-out

print
print "result in $outf"
