# <std-header style='tcl' orig-src='shore'>
#
#  $Id: multi.3.save,v 1.8.4.1 2009/10/13 22:10:47 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
# This script demonstrates a bug which occurs
# when two threads try creating a file at the
# same time. The problem is that one thread holds
# a latch on the last log records, which the other
# thread deadlocks on.
#
# Depending upon optimization and DEBUG modes,
# 'ntries' may have to be increased to demonstrate
# the problem.
#
# bolo, 30 October 1995
#

source $script_dir/vol.init

set ntries 16
set nxct 100

proc go_go_gadget {name t} {
    global ntries volid nxct
    sm attach_xct $t
    for {set j 1} {$j <= $nxct} {incr j} {
	for {set i 1} {$i <= $ntries} {incr i} {
	    set f0 [sm create_file $volid]]
	    set f1 [sm create_file $volid]]
	    sm sleep 1
	    sm destroy_file $f0
	    sm destroy_file $f1
	    verbose $name ":" $i
	}
    }
}

verbose starting 2 threads


sm begin_xct
set tid [sm xct]
set t1 [fork_thread go_go_gadget "t1" $tid ]
set t2 [fork_thread go_go_gadget "t2" $tid ]

verbose waiting for threads

join_thread $t1
join_thread $t2

sm commit_xct

verbose threads done

