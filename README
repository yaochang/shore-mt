
*****************************************************************************
*****************************************************************************
*                                                                           *
*                           Preliminaries                                   *
*                                                                           *
*****************************************************************************
*****************************************************************************
Configuration and build for 5.0.2 were tested with:
aclocal,automake  1.9.4 and 1.9.6
autoheader,autoconf 2.59, 2.60
gcc 3.4.4 and 3.4.6 (see also README.compilers)

RedHat    Linux 2.6.9-42.0.8.ELsmp #1 SMP Tue Jan 30 12:33:47 EST 2007 i686 
Slackware Linux 2.4.33.3 #1 2.4.33.3 #1 Fri Sep 1 01:48:52 CDT 2006 i686 



*****************************************************************************
*****************************************************************************
*                                                                           *
*                           Configuring                                     *
*                                                                           *
*****************************************************************************
*****************************************************************************
Run 
	./configure 
    or
        ./configure --prefix=<alt-to-/usr/local-for-install>
    or
	./configure  --help 
           to see options.

If that doesn't work or if you have been hacking on the
storage manager and if you have the autotools installed, 
you can run

	./bootstrap

followed by configure.

-----------------------------------------------------------------------------
NOTE: re: configure options : run
	./configure --help 
to find out what SHORE-specific build configure offers. 

--enable-lp64  : this is the default.  This option exists only for the
                 purpose of enabling building on a 32-bit platform, which
				 is NOT SUPPORTED YET.

--enable-checkrc: when enabled, code is included to make sure that 
                 a w_rc_t has been checked for is_error() before it is
				 destructred.

--enable-trace  : when enabled, code is included to print tracing info
                 based on the value of the DEBUG_FLAGS environment variable

--enable-dbgsymbols  : when enabled, turns on -g, but can be overridden by
                 compiler optimization options, depending  compiler and
				 on debugging level used

--enable-explicit  : when enabled, compiles with explicit templates if the
                 compiler supports it. NOT SUPPORTED NOW



If you are planning to modify the storage manager, you'll probably
want to configure a debug version.

--with-debug-level0 :  default if no other level is given.
                       Max optimization,   inlining
					       no debugger symbols
						   defines W_DEBUG_LEVEL=0, enables w_assert0
						   -UDEBUG, -DNDEBUG
					   This version includes little or no self-checks (asserts), so is
					   not good for "production" unless you are sure about your code.
					   Useful for performance testing, if you're trusting.

--with-debug-level1 :  Optimization -O2,  inlining
					       includes debugger symbols
                           defines W_DEBUG_LEVEL=1, enables w_assert1
						   -UDEBUG, -DNDEBUG
					   This version is probably a good "standard" version.

--with-debug-level2 :  No optimization,  no inlining
					       includes debugger symbols
                           defines W_DEBUG_LEVEL=2, enables w_assert1, w_assert2
						   -UDEBUG, -DNDEBUG
					   This version changes the timing quite a bit but is
					   good for debugging functionality that isn't timing-dependent.

--with-debug-level3 :  No optimization,  no inlining
					       includes debugger symbols
                           defines W_DEBUG_LEVEL=3, enables w_assert1, w_assert2, w_assert3
						   -DDEBUG, -UNDEBUG 
					   This version changes the timing quite a bit but is
					   good for debugging functionality that isn't timing-dependent,
					   and includes a lot more self-checking than level 2.
                     
--with-debug-levelN with N>3 : not supported yet. 
                           Any code you see with
							   w_assert<N> for N>3, or 
							   relating to W_DEBUG_LEVELs greater than 3 
						   is  experimental or code that is left over from
						   pre-multithreaded days and is not tested yet. 
						   Or it is disabled for another reason.


When in doubt, you can see the flags used by the last make in the file ./makeflags.

-----------------------------------------------------------------------------
NOTE: If you want to use a compiler other than that which ./configure
finds, do this:
	setenv CXX <path-to-compiler>
then 
	./configure

or
	./configure CXX=<path-to-compiler>
-----------------------------------------------------------------------------
NOTE: If you don't seem to be getting dependency tracking and you want
it to be enabled, add --enable-dependency-tracking to your ./configure
command.

-----------------------------------------------------------------------------
   

See also README.cppmacros




*****************************************************************************
*****************************************************************************
*                                                                           *
*                           Building                                        *
*                                                                           *
*****************************************************************************
*****************************************************************************
After running configure,  run

	make 

to make the libraries.
-----------------------------------------------------------------------------

NOTE: the documents are distributed in PDF form and cannot be made.
They can only be installed with 'make install'.



*****************************************************************************
*****************************************************************************
*                                                                           *
*                 Checking the built libraries                              *
*                                                                           *
*****************************************************************************
*****************************************************************************

Run
	make check 
to build and run the test programs via scripts in each library.

-----------------------------------------------------------------------------
--->NOTE: To make smsh, the storage manager testing shell, you must edit 

           Makefile.local

so that make can find your local TCL installation, if it's not in a standard
place where it will be found (/usr/include/tcl.h, /usr/lib/libtcl.so, etc).
-----------------------------------------------------------------------------
The 'testall' script in smsh runs a very long set of tests, so 
it is not the default test for smsh.
-----------------------------------------------------------------------------



*****************************************************************************
*****************************************************************************
*                                                                           *
*                           Installing                                      *
*                                                                           *
*****************************************************************************
*****************************************************************************

-----------------------------------------------------------------------------
Run
	make install 

to install 
	diskrw executable in <bindir> [default: <exec-prefix>/bin]
	the header files  in <includedir> [default: <prefix>/include]
	the libraries in <libdir> [default: <exec-prefix>/lib]
	the documents in <docdir> [default: <prefix>/share/doc/shore-storage-manager]

To change the generic prefix, use the configure option:
	configure --prefix=<new prefix path>
To change the specific target directories, use one or more of the ./configure option:
	configure --bindir=<new bindir path>
	configure --includedir=<new include path>
	configure --libdir=<new libdir path>
	configure --docdir=<new docdir path>

    NOTE: despite what newer versions of configure say about pdfdir, htmldir, 
          psdir, you cannot use these options with this distribution.

-----------------------------------------------------------------------------
